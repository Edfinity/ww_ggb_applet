// Generated by CoffeeScript 1.12.7
var WwGgbApplet;

exports.WwGgbApplet = WwGgbApplet = (function() {
  WwGgbApplet.instances = [];

  WwGgbApplet.locked = false;

  WwGgbApplet.$frame = null;

  WwGgbApplet.lockAll = function() {
    var i, instance, len, ref, results;
    this.locked = true;
    ref = this.instances;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      instance = ref[i];
      results.push(instance.lock());
    }
    return results;
  };

  WwGgbApplet.unlockAll = function() {
    return this.locked = false;
  };

  WwGgbApplet.recreateAll = function() {
    var i, instance, len, ref, results;
    ref = this.instances;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      instance = ref[i];
      results.push(instance.recreate());
    }
    return results;
  };

  function WwGgbApplet(elementId, geogebraParams) {
    var base, base1, base2, userOnLoad;
    this.elementId = elementId;
    this.geogebraParams = geogebraParams;
    if (typeof jQuery === "undefined" || jQuery === null) {
      console.log('GeogebraApplet3 depends on the jQuery library.');
    }
    this.innerId = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);
    if ((base = this.geogebraParams).id == null) {
      base.id = this.elementId;
    }
    if ((base1 = this.geogebraParams).width == null) {
      base1.width = 400;
    }
    if ((base2 = this.geogebraParams).height == null) {
      base2.height = 400;
    }
    userOnLoad = this.geogebraParams.appletOnLoad;
    this.geogebraParams.appletOnLoad = (function(_this) {
      return function(applet) {
        _this.applet = applet;
        if (_this.geogebraParams.appletOnUpdate) {
          applet.registerUpdateListener(_this.geogebraParams.appletOnUpdate);
        }
        if (typeof userOnLoad === "function") {
          userOnLoad(applet);
        }
        if (_this.geogebraParams.hideAnswers) {
          _this.hideAllAnswers();
        }
        if (WwGgbApplet.locked) {
          return _this.lock();
        }
      };
    })(this);
    WwGgbApplet.instances.push(this);
    this.buildApplet();
  }

  WwGgbApplet.prototype.$element = function() {
    var ref;
    return jQuery((ref = WwGgbApplet.$frame) != null ? ref : document).find("[id=" + this.elementId + "]");
  };

  WwGgbApplet.prototype.buildApplet = function() {
    if (typeof GGBApplet !== "undefined" && GGBApplet !== null) {
      return this.buildLoaded();
    } else {
      return jQuery.ajax({
        url: 'https://cdn.geogebra.org/apps/deployggb.js',
        dataType: "script",
        cache: true,
        success: (function(_this) {
          return function() {
            return _this.buildLoaded();
          };
        })(this)
      });
    }
  };

  WwGgbApplet.prototype.buildLoaded = function() {
    this.ggbApplet = new GGBApplet(this.geogebraParams, true);
    if (!this.$element().get(0)) {
      console.log("Element not found");
    }
    this.$inner = jQuery("<div>").attr({
      id: this.innerId
    }).appendTo(this.$element().empty().css({
      border: 'none',
      width: this.geogebraParams.width,
      height: this.geogebraParams.height
    }));
    if (document.readyState === 'complete') {
      this.ggbApplet.inject(this.innerId);
      return this.$inner.css({
        width: this.geogebraParams.width,
        height: this.geogebraParams.height
      });
    } else {
      return window.addEventListener("load", (function(_this) {
        return function() {
          return _this.ggbApplet.inject(_this.innerId);
        };
      })(this));
    }
  };

  WwGgbApplet.prototype.setAnswer = function(answerId, value) {
    var ref;
    return jQuery((ref = WwGgbApplet.$frame) != null ? ref : document).find("#" + answerId).val(value).trigger('rapid-change');
  };

  WwGgbApplet.prototype.hideAnswer = function(answerId) {
    var ref, ref1, ref2;
    jQuery((ref = WwGgbApplet.$frame) != null ? ref : document).find("#" + answerId).hide().addClass('hide-marks');
    jQuery((ref1 = WwGgbApplet.$frame) != null ? ref1 : document).find("#" + answerId + " + .answer-mark").hide();
    return jQuery((ref2 = WwGgbApplet.$frame) != null ? ref2 : document).find$('.submit.button').removeClass('disabled');
  };

  WwGgbApplet.prototype.hideAllAnswers = function() {
    var ref, ref1;
    jQuery((ref = WwGgbApplet.$frame) != null ? ref : document).find('[id^="AnSwEr"]').hide().addClass('hide-marks');
    return jQuery((ref1 = WwGgbApplet.$frame) != null ? ref1 : document).find('[id^="AnSwEr"] + .answer-mark').hide();
  };

  WwGgbApplet.prototype.setCoordinates = function(answerId, defaults) {
    var answer, answerCoordinates, answers, coord, i, len, objectName, ref, ref1, results, values;
    answers = jQuery((ref = WwGgbApplet.$frame) != null ? ref : document).find("#" + answerId).val().split(';');
    answers.pop();
    answerCoordinates = [];
    for (i = 0, len = answers.length; i < len; i++) {
      answer = answers[i];
      values = answer.split('=');
      answerCoordinates[values[0]] = values[1];
    }
    results = [];
    for (objectName in defaults) {
      coord = defaults[objectName];
      results.push(this.applet.evalCommand(objectName + " = " + ((ref1 = answerCoordinates[objectName]) != null ? ref1 : coord)));
    }
    return results;
  };

  WwGgbApplet.prototype.setCoordinateAnswer = function(answerId, keys, answerKey) {
    var i, key, len, value;
    value = [];
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      value.push(key + "=(" + (this.applet.getXcoord(key)) + ", " + (this.applet.getYcoord(key)) + ")");
    }
    value.push(this.applet.getValue(answerKey));
    return this.setAnswer(answerId, value.join(';'));
  };

  WwGgbApplet.prototype.lock = function() {
    var i, len, name, ref, results;
    if (this.applet != null) {
      ref = this.applet.getAllObjectNames();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        results.push(this.applet.setFixed(name, true));
      }
      return results;
    }
  };

  WwGgbApplet.prototype.recreate = function() {
    if (!((this.$inner != null) && !this.$inner.is(':empty'))) {
      return this.buildApplet();
    }
  };

  return WwGgbApplet;

})();
