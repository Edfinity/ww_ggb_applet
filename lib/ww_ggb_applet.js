// Generated by CoffeeScript 1.12.7
var WwGgbApplet;

WwGgbApplet = (function() {
  var _buildApplet, _buildInnerId, _instances, _options;

  _instances = [];

  _options = {};

  _buildInnerId = function() {
    return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);
  };

  _buildApplet = function($element, params) {
    var applet, inner, innerId;
    applet = new GGBApplet(params, true);
    innerId = _buildInnerId();
    inner = jQuery("<div>").attr({
      id: innerId
    }).appendTo($element.empty().css({
      border: 'none',
      width: params.width,
      height: params.height
    }));
    if (document.readyState === 'complete') {
      applet.inject(innerId);
      return inner.css({
        width: params.width,
        height: params.height
      });
    } else {
      return window.addEventListener("load", (function(_this) {
        return function() {
          return applet.inject(innerId);
        };
      })(this));
    }
  };

  WwGgbApplet.configure = function(options) {
    if (typeof jQuery !== "undefined" && jQuery !== null) {
      return jQuery.extend(_options, {
        onHideAnswer: jQuery.noop,
        onHideAnswers: jQuery.noop
      }, options);
    }
  };

  WwGgbApplet.lock = function($container, lock) {
    var i, instance, len, ref, results;
    if ($container == null) {
      $container = 'body';
    }
    if (lock == null) {
      lock = true;
    }
    ref = this.getInstances($container);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      instance = ref[i];
      results.push(instance.lock(lock));
    }
    return results;
  };

  WwGgbApplet.getInstances = function($container) {
    var containedInstances, i, instance, len;
    if ($container == null) {
      $container = 'body';
    }
    $container = jQuery($container);
    containedInstances = [];
    if ($container.get(0)) {
      for (i = 0, len = _instances.length; i < len; i++) {
        instance = _instances[i];
        if (jQuery.contains($container.get(0), instance.$container.get(0))) {
          containedInstances.push(instance);
        }
      }
    }
    return containedInstances;
  };

  function WwGgbApplet(elementId, geogebraParams) {
    var $el, userOnLoad;
    this.elementId = elementId;
    this.geogebraParams = geogebraParams;
    this.locked = false;
    if (typeof jQuery !== "undefined" && jQuery !== null) {
      $el = jQuery("[id=" + this.elementId + "]:last");
      if ($el.get(0) != null) {
        this.$container = $el.parent();
        this.geogebraParams = jQuery.extend({}, {
          id: this.elementId,
          width: 400,
          height: 400
        }, this.geogebraParams);
        userOnLoad = this.geogebraParams.appletOnLoad;
        this.geogebraParams.appletOnLoad = (function(_this) {
          return function(applet) {
            var base;
            _this.applet = applet;
            if (_this.geogebraParams.appletOnUpdate) {
              applet.registerUpdateListener(jQuery.proxy(_this.geogebraParams.appletOnUpdate, _this));
            }
            if (typeof (base = jQuery.proxy(userOnLoad, _this)) === "function") {
              base(applet);
            }
            if (_this.geogebraParams.hideAnswers) {
              _this.hideAnswers();
            }
            if (_this.locked) {
              return _this.lock();
            }
          };
        })(this);
        this.ggbApplet = _buildApplet($el, this.geogebraParams);
        _instances.push(this);
      } else {
        console.log("Element not found");
      }
    } else {
      console.log('GeogebraApplet3 depends on the jQuery library.');
    }
  }

  WwGgbApplet.prototype.setAnswer = function(answerId, value) {
    return this.$container.find("#" + answerId).val(value).trigger('rapid-change');
  };

  WwGgbApplet.prototype.getAnswer = function(answerId) {
    return this.$container.find("#" + answerId).val();
  };

  WwGgbApplet.prototype.hideAnswer = function(answerId) {
    this.$container.find("#" + answerId).hide();
    return _options.onHideAnswer(this.$container, answerId);
  };

  WwGgbApplet.prototype.hideAnswers = function() {
    this.$container.find('[id^="AnSwEr"]').hide();
    return _options.onHideAnswers(this.$container);
  };

  WwGgbApplet.prototype.setCoordinates = function(answerId, defaults) {
    var answer, answerCoordinates, answers, coord, i, len, objectName, ref, results, values;
    answers = this.$container.find("#" + answerId).val().split(';');
    if (answers.length > 2) {
      answers.pop();
    }
    answerCoordinates = [];
    for (i = 0, len = answers.length; i < len; i++) {
      answer = answers[i];
      values = answer.split('=');
      answerCoordinates[values[0]] = values[1];
    }
    results = [];
    for (objectName in defaults) {
      coord = defaults[objectName];
      results.push(this.applet.evalCommand(objectName + " = " + ((ref = answerCoordinates[objectName]) != null ? ref : coord)));
    }
    return results;
  };

  WwGgbApplet.prototype.setCoordinateAnswer = function(answerId, keys, answerKey) {
    var i, key, len, value;
    value = [];
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      value.push(key + "=(" + (this.applet.getXcoord(key)) + ", " + (this.applet.getYcoord(key)) + ")");
    }
    value.push(this.applet.getValue(answerKey));
    return this.setAnswer(answerId, value.join(';'));
  };

  WwGgbApplet.prototype.lock = function(lock) {
    var i, len, name, ref, results;
    if (lock == null) {
      lock = true;
    }
    this.locked = lock;
    if (this.applet != null) {
      ref = this.applet.getAllObjectNames();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        results.push(this.applet.setFixed(name, lock));
      }
      return results;
    }
  };

  return WwGgbApplet;

})();

if (typeof window !== "undefined" && window !== null) {
  window.WwGgbApplet = WwGgbApplet;
}

if (typeof exports !== "undefined" && exports !== null) {
  exports.WwGgbApplet = WwGgbApplet;
}
