// Generated by CoffeeScript 1.12.7
var WwGgbApplet,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

WwGgbApplet = (function() {
  var _buildInnerId, _buildResetButton, _instances, _options;

  _instances = [];

  _options = {};

  _buildInnerId = function() {
    return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);
  };

  _buildResetButton = function($inner, params) {
    return $inner.after("<button class='btn btn-white my-3 reset-applet d-block'>" + params.resetButtonLabel + "</button>");
  };

  WwGgbApplet.configure = function(options) {
    if (typeof jQuery !== "undefined" && jQuery !== null) {
      return jQuery.extend(_options, {
        onHideAnswer: jQuery.noop,
        onHideAnswers: jQuery.noop
      }, options);
    }
  };

  WwGgbApplet.lock = function($container, lock) {
    var i, instance, len, ref, results;
    if ($container == null) {
      $container = 'body';
    }
    if (lock == null) {
      lock = true;
    }
    ref = this.getInstances($container);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      instance = ref[i];
      results.push(instance.lock(lock));
    }
    return results;
  };

  WwGgbApplet.getInstances = function($container) {
    var containedInstances, i, instance, len;
    if ($container == null) {
      $container = 'body';
    }
    $container = jQuery($container);
    containedInstances = [];
    if ($container.get(0)) {
      for (i = 0, len = _instances.length; i < len; i++) {
        instance = _instances[i];
        if (jQuery.contains($container.get(0), instance.$container.get(0))) {
          containedInstances.push(instance);
        }
      }
    }
    return containedInstances;
  };

  WwGgbApplet.getInstance = function(element) {
    element = $(element);
    return _(_instances).find(function(instance) {
      return instance.$el.get(0) === element.get(0);
    });
  };

  function WwGgbApplet(elementId, params1) {
    var $el;
    this.params = params1;
    this.onAppletLoad = bind(this.onAppletLoad, this);
    this.locked = false;
    this.restoring = false;
    this.initialLoad = true;
    this.innerId = _buildInnerId();
    this.elementId = elementId + "-" + this.innerId;
    this.originalState = this.params.ggbBase64;
    if (typeof jQuery !== "undefined" && jQuery !== null) {
      $el = jQuery("[id=" + elementId + "]:last");
      if ($el.get(0) != null) {
        this.$el = $el;
        this.$container = this.params.container || $el.parent();
        this.$container.addClass('edfinity-geogebra');
        this.params = jQuery.extend({}, {
          id: this.elementId,
          width: 400,
          height: 400,
          saveState: false,
          appletOnUpdate: $.noop,
          autoBuild: false,
          resetButton: false,
          resetButtonLabel: 'Reset'
        }, this.params);
        if (!this.params.saveState) {
          this.params.resetButton = false;
        }
        if (this.params.hideAnswers) {
          this.hideAnswers();
        }
        this.params.appletOnLoad = this.onAppletLoad(this.params.appletOnLoad);
        if (this.params.autoBuild) {
          this.build();
        }
        _instances.push(this);
      } else {
        console.log('Element not found');
      }
    } else {
      console.log('WwGgbApplet depends on jQuery library.');
    }
  }

  WwGgbApplet.prototype.build = function() {
    var $inner, innerId;
    this.ggbApplet = new GGBApplet(this.params, true);
    innerId = _buildInnerId();
    $inner = jQuery("<div>").attr({
      id: innerId
    });
    $inner.appendTo(this.$el.empty().css({
      border: 'none',
      width: this.params.width,
      height: this.params.height
    }));
    if (this.params.resetButton) {
      _buildResetButton(this.$el, this.params);
    }
    if (document.readyState === 'complete') {
      this.ggbApplet.inject(innerId);
      return $inner.css({
        width: this.params.width,
        height: this.params.height
      });
    } else {
      return window.addEventListener("load", (function(_this) {
        return function() {
          return _this.ggbApplet.inject(innerId);
        };
      })(this));
    }
  };

  WwGgbApplet.prototype.answerEl = function(answerId) {
    return this.$container.find("#" + answerId);
  };

  WwGgbApplet.prototype.resetButton = function() {
    return this.$container.find('.reset-applet');
  };

  WwGgbApplet.prototype.setAnswer = function(answerId, value) {
    var $answerEl;
    $answerEl = this.answerEl(answerId);
    if ($answerEl.val() !== value) {
      $answerEl.val(value);
      $answerEl.trigger('rapid-change');
      if (this.params.hideAnswers) {
        return this.hideAnswer(answerId);
      }
    }
  };

  WwGgbApplet.prototype.getAnswer = function(answerId) {
    var $answerEl;
    $answerEl = this.answerEl(answerId);
    return $answerEl.val();
  };

  WwGgbApplet.prototype.hideAnswer = function(answerId) {
    this.answerEl(answerId).hide();
    return _options.onHideAnswer(this.$container, answerId);
  };

  WwGgbApplet.prototype.hideAnswers = function() {
    this.$container.find('[id^="AnSwEr"]').hide();
    return _options.onHideAnswers(this.$container);
  };

  WwGgbApplet.prototype.setCoordinates = function(answerId, defaults) {
    var answer, answerCoordinates, answers, coord, i, len, objectName, ref, results, values;
    if (this.params.hideAnswers) {
      this.hideAnswer(answerId);
    }
    answerCoordinates = [];
    answers = this.answerEl(answerId).val().split(';');
    if (answers.length > 2) {
      answers.pop();
    }
    for (i = 0, len = answers.length; i < len; i++) {
      answer = answers[i];
      values = answer.split('=');
      answerCoordinates[values[0]] = values[1];
    }
    results = [];
    for (objectName in defaults) {
      coord = defaults[objectName];
      results.push(this.applet.evalCommand(objectName + " = " + ((ref = answerCoordinates[objectName]) != null ? ref : coord)));
    }
    return results;
  };

  WwGgbApplet.prototype.setCoordinateAnswer = function(answerId, keys, answerKey) {
    var i, key, len, value;
    value = [];
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      value.push(key + "=(" + (this.applet.getXcoord(key)) + ", " + (this.applet.getYcoord(key)) + ")");
    }
    value.push(this.applet.getValue(answerKey));
    return this.setAnswer(answerId, value.join(';'));
  };

  WwGgbApplet.prototype.lock = function(lock) {
    var i, len, name, ref;
    if (lock == null) {
      lock = true;
    }
    this.locked = lock;
    if (this.applet != null) {
      ref = this.applet.getAllObjectNames();
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        this.applet.setFixed(name, lock);
      }
    }
    return this.resetButton().toggleClass('d-block', !lock).toggleClass('d-none', lock);
  };

  WwGgbApplet.prototype.setState = function(ggb64, callback) {
    this.restoring = true;
    return this.applet.setBase64(ggb64, (function(_this) {
      return function() {
        _this.restoring = false;
        _this.hideBuggyControls();
        return callback();
      };
    })(this));
  };

  WwGgbApplet.prototype["delete"] = function() {
    var index;
    if (this.applet != null) {
      this.applet.unregisterUpdateListener(this.onAppletUpdate);
      this.applet.unregisterUpdateListener(this.onAppletUpdateCallback);
    }
    this.$el.off('focusout');
    this.resetButton().off('click');
    index = _instances.indexOf(this);
    if (index > -1) {
      return _instances.splice(index, 1);
    }
  };

  WwGgbApplet.prototype.listenToElements = function() {
    if (this.params.saveState) {
      this.$el.on('focusout', (function(_this) {
        return function(e) {
          return _this.onAppletFocusout(e);
        };
      })(this));
    }
    return this.resetButton().on('click', (function(_this) {
      return function(e) {
        return _this.onAppletReset(e);
      };
    })(this));
  };

  WwGgbApplet.prototype.hideBuggyControls = function() {
    this.applet.setVisible('Prism', false);
    this.applet.setVisible('Pyramid', false);
    return this.applet.setVisible('Archimedean', false);
  };

  WwGgbApplet.prototype.onAppletUpdate = function(obj) {
    return this.$el.trigger('applet-update', {
      ggb: this,
      applet: this.applet,
      obj: obj
    });
  };

  WwGgbApplet.prototype.onAppletFocusout = function() {
    return this.$el.trigger('applet-focusout', {
      ggb: this,
      applet: this.applet
    });
  };

  WwGgbApplet.prototype.onAppletReset = function() {
    return this.setState(this.originalState, (function(_this) {
      return function() {
        return _this.$el.trigger('applet-reset', {
          ggb: _this,
          applet: _this.applet
        });
      };
    })(this));
  };

  WwGgbApplet.prototype.onAppletLoad = function(callback) {
    if (callback == null) {
      callback = $.noop;
    }
    return (function(_this) {
      return function(applet) {
        var base;
        _this.applet = applet;
        if (_this.params.saveState) {
          applet.registerUpdateListener(_this.onAppletUpdate.bind(_this));
        }
        _this.onAppletUpdateCallback = jQuery.proxy(_this.params.appletOnUpdate, _this);
        applet.registerUpdateListener(_this.onAppletUpdateCallback);
        if (_this.initialLoad) {
          _this.listenToElements();
        }
        if (typeof (base = jQuery.proxy(callback, _this)) === "function") {
          base(applet);
        }
        if (_this.locked) {
          _this.lock();
        }
        _this.hideBuggyControls();
        _this.$el.trigger('applet-load', {
          ggb: _this,
          applet: _this.applet,
          initialLoad: _this.initialLoad
        });
        return _this.initialLoad = false;
      };
    })(this);
  };

  return WwGgbApplet;

})();

if (typeof window !== "undefined" && window !== null) {
  window.WwGgbApplet = WwGgbApplet;
}

if (typeof exports !== "undefined" && exports !== null) {
  exports.WwGgbApplet = WwGgbApplet;
}
